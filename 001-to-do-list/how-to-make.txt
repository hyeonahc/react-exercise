컴포넌트 구조
App.jsx
ㄴTodoTemplate.jsx
	ㄴTodoInsert.jsx
	ㄴTodoList.jsx
		ㄴ TodoListItem.jsx

설치해야할 라이브러리
1. yarn add sass
2. yarn add react-icons
3. yarn add classname

——————————————————————————

App.jsx
데이터
1. to do list에서 기본으로 보여줄 todos데이터를 Array안에 오브젝트 형태로 저장
2. 리턴문 안에 있는 컴포넌트가 props로 넘겨줄 함수들을 모두 정의

- onInsert: TodoListItem 컴포넌트에 새로운 리스트를 추가해주는 함수
onInsert함수는 TodoInsert에서 input에 입력된 value값을 파라미터로 가져와서 todos 배열에 객체 형태로 저장해준다. 새로운 객체를 만든 후 만든 객체를 기존에 있는 배열에 concat 메소드를 사용해 배열에 추가해준다. 이후에 아이디값을 1씩 증가시켜준다. id의 값을 지정할때 useState가 아닌 useRef를 써주는 것에 주의하자

- onToggle: TodoListItem 컴포넌트에 있는 체크박스에 check, uncheck기능을 구현해주는 함수
id값을 파라미터로 받아오고 todos안에 있는 모든 객체의 id값과 파라미터로 받아온 id값을 비교한다. 그 두값이 같다면 checked 키값에 checked를 true, false로 toggle해준다. 클릭함수가 일어날때마다 onToggle 함수가 실행되서 id를 파라미터로 가져오고 checked값을 true, false로 (한번 클릭했을때 true, 그다음 클릭했을때 false) 실행되기 때문에 static한 값을 넣을 수 없다.
*배열에 값 수정하기
setTest(
…test, -> 기존값 복사
key: value -> 변경된값 덮어씌어주기
)

- onRemove: todoListItem 컴포넌트에서 remove 클래스를 가진 div가 클릭되었을때 onRemove 함수가 실행된다. 이때 onRemove 함수에 id 값을 파라미터로 가져오고 todos 안에 있는 오브젝트의 id값과 비교해서 그 값이 다른경우에만 배열에 남긴다. 배열의 메소드 filter를 사용해보자. filter는 조건식을 만족한경우에만 해당 배열에 남을 수 있다. 예를들면 [기존배열].filter(함수)가 있으면 기존배열에 있는 데이터가 filter 메소드의 첫번째 파라미터로 가지고 있는 함수의 조건에 맞는 경우에만 배열에 남을 수 있다.

리턴
1. TodoTemplate 컴포넌트 안에 TodoInsert, TodoList 컴포넌트를 children으로 감싼 형태로 리턴
2. TodoInsert 컴포넌트에 onInsert 함수를 props로 전달
3. TodoList 컴포넌트에 todos 데이터, onToggle 함수, onRemove 함수를 props로 전달
- todos는 setState로 생성한 배열
- onToggle함수는 체크박스에 on/off 기능을 구현
- onRemove함수는 리스트를 삭제하는 함수

——————————————————————————

TodoTemplate.jsx
리턴
1. TodoTemplate이라는 클래스이름을 가진 부모 div
2. 그안에 app-title과 content라는 클래스 이름을 가진 div
3. content 클래스이름을 가진 div안에는 App.jsx에서 리턴시킨 TodoTemplate 컴포넌트의 children을 불러온다
* 참고로 children은 부모컴포넌트에서 props로 따로 지정해주는 값이 아니며 컴포넌트의 부모자식관계가 생길때 자식요소 모두를 children이라고 부른다
 
——————————————————————————

TodoInsert.jsx
* props를 받아오자
리턴
1. form > input + button 구조
2. form에 TodoInsert 클래스 onSubmit 함수
3. input에 placeholder, value값을 지정한 후 placeholder에는 사용자가 어떤값을 타입하기전에 알려주는 문구 Type New List Item으로하고 value는 input에 어떠한 움직임이 포착되면 그 값을 스테이트로 저장하는 용도로 사용한다
4. onChange라는 함수로 바뀐 value값을 계속 업데이트해서 저장해준다
5. button의 타입은 submit이므로 버튼이 클릭되었을때 form에 있는 onSubmit함수가 실행된다
6. onSubmit함수가 실행되면 TodoInsert에서 props로 받아와준 onInsert함수에 value값을 전달해준다 (즉 onSubmit함수가 실행되면 onInsert함수에 파라미터값을 전달해주고 실행해준다. onInsert함수는 파라미터 값을 받고 App에 정의된 onInsert함수를 실행해준다)
 
——————————————————————————

TodoList.jsx
* props를 받아오자
리턴
1. TodoList라는 클래스를 가진 div태그 안에 받아온 props값을 TodoListItem 컴포넌트에 다시 props로 전달해준다
지정해준 props값: todos, onToggle, onRemove
2. TodoListItem 컴포넌트는 리스트 아이템 하나만 만드는 컴포넌트이므로 todos안에 있는 객체 하나만 받아와야함에 주의하자
그리고 key값을 빼먹지말자!

——————————————————————————

TodoListItem.jsx
* props를 받아오자
데이터
받아온 props를 비구조화할당문법을 사용해서 선언
리턴
1. 구조는 다음과 같다 
div.TodoListItem
ㄴdiv.checkbox: classnames라는 api를 사용해 만약 checkbox라는 클래스가 있다면 check가 되게 없다면 uncheck가 되게 구현. 이때 체크박스를 클릭했을때 onToggle 함수에게 id값을 전달해준다
	ㄴdiv.text
ㄴdiv.remove
